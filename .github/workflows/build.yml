name: Build yt-dlp GUI Binaries

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  contents: write

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
        python-version: ['3.10']
        os_suffix: [windows, linux]
        exclude:
          - os: windows-latest
            os_suffix: linux
          - os: ubuntu-latest
            os_suffix: windows

    steps:
      # Клонирование репозитория
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      # Установка Python
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}

      # Чтение версии из version.txt
      - name: Read version
        id: version
        run: |
          VERSION=$(cat version.txt)
          echo "VERSION=$VERSION" >> $GITHUB_ENV
        shell: bash

      # Установка зависимостей
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pyinstaller
          pip install -r requirements.txt

      # Установка системных зависимостей для Linux (только необходимые)
      - name: Install system dependencies (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y libegl1 libopengl0 libgl1-mesa-dev

      # Сборка с PyInstaller
      - name: Build with PyInstaller
        run: |
          if [ ! -f "assets/icon.ico" ]; then
            echo "Ошибка: Файл assets/icon.ico не найден"
            exit 1
          fi
          pyinstaller --name gui_for_yt-dlp_v${{ env.VERSION }}_${{ matrix.os_suffix }} \
                      --onefile \
                      --icon assets/icon.ico \
                      --add-data "assets/icon.ico${{ matrix.os == 'windows-latest' && ';' || ':' }}assets" \
                      --add-data "version.txt${{ matrix.os == 'windows-latest' && ';' || ':' }}." \
                      --noconfirm \
                      --noconsole \
                      gui_yt-dlp.py
        shell: bash '

      # Загрузка артефакта
      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: gui_for_yt-dlp_v${{ env.VERSION }}_${{ matrix.os_suffix }}
          path: dist/gui_for_yt-dlp_v${{ env.VERSION }}_${{ matrix.os_suffix }}*

      # Проверка существования релиза через GitHub API
      - name: Check if release exists
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        id: check_release
        run: |
          TAG="v${{ env.VERSION }}"
          RESPONSE=$(curl -s -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                          https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG)
          if [[ $(echo "$RESPONSE" | jq -r '.id') != "null" ]]; then
            echo "Release with tag $TAG already exists"
            echo "release_exists=true" >> $GITHUB_ENV
          else
            echo "release_exists=false" >> $GITHUB_ENV
          fi
        shell: bash

      # Создание релиза
      - name: Create Release
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && env.release_exists == 'false'
        uses: softprops/action-gh-release@v2
        with:
          files: dist/gui_for_yt-dlp_v${{ env.VERSION }}_${{ matrix.os_suffix }}*
          tag_name: v${{ env.VERSION }}
          name: Release v${{ env.VERSION }}
          body: Automated release for yt-dlp GUI v${{ env.VERSION }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # Обновление версии (только для Windows и после успешного релиза)
      - name: Bump version
        if: github.event_name == 'push' && github.ref == 'refs/heads/main' && matrix.os == 'windows-latest' && env.release_exists == 'false'
        run: |
          git pull --rebase origin main
          python bump_version.py
          git config --global user.name 'GitHub Actions'
          git config --global user.email 'actions@github.com'
          git add version.txt
          git commit -m "Bump version to $(cat version.txt)"
          git push
        shell: bash